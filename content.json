{"meta":{"title":"Onion's blog","subtitle":null,"description":null,"author":"Zhonglin Nian","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2018-10-07T17:15:42.255Z","updated":"2018-10-04T07:50:27.697Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-10-07T17:15:42.266Z","updated":"2018-10-04T07:50:27.697Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Two Sum","slug":"Two-Sum","date":"2018-10-08T02:18:00.000Z","updated":"2018-10-08T03:20:16.506Z","comments":true,"path":"2018/10/08/Two-Sum/","link":"","permalink":"http://yoursite.com/2018/10/08/Two-Sum/","excerpt":"First Leetcode exercise, keep going! DescriptionGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: 1234Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].","text":"First Leetcode exercise, keep going! DescriptionGiven an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: 1234Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. SolutionSince the array is not in order, we can not use the idea of two pointers at the begining and end. To make it in $O(n)$, we just go through the array once and store the information we need. ListThe basic idea is to check whether the current nums[i] and the recorded List[j] could added to the target. So weâ€™d like to check target-nums[i] is in the list or not, if not, we append nums[i] to the list, if yes, we just return the index (j,i). 123456789101112def twoSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[int] \"\"\" tmp=[] for i in range(len(nums)): if target-nums[i] not in tmp: tmp.append(nums[i]) else: return [tmp.index(target-nums[i]),i] DictThe only drawback of using List is the index() function is also $O(n)$, which means in the worse case, the runtime is $2n$. Instead, we can use a dict to store the number as well as the index. And the query is $O(1)$.123456789101112def twoSum(self, nums, target): \"\"\" :type nums: List[int] :type target: int :rtype: List[int] \"\"\" store = &#123;&#125; for i in range(len(nums)): if target-nums[i] not in store: store[nums[i]]=i else: return [store[target-nums[i]],i] AnalysisThe List method takes about 368ms to run the testcase while Dict mehod only use 36ms. We do see the power of Hash here.","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://yoursite.com/categories/LeetCode/"},{"name":"Easy","slug":"LeetCode/Easy","permalink":"http://yoursite.com/categories/LeetCode/Easy/"}],"tags":[{"name":"Hash","slug":"Hash","permalink":"http://yoursite.com/tags/Hash/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-10-04T07:32:52.772Z","updated":"2018-10-04T07:32:52.772Z","comments":true,"path":"2018/10/04/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}